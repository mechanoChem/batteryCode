#ifndef battery_h
#define battery_h

#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/logstream.h>
#include <deal.II/base/function.h>
#include <deal.II/lac/block_vector.h>
#include <deal.II/lac/full_matrix.h>
#include <deal.II/lac/block_sparse_matrix.h>
#include <deal.II/lac/sparse_direct.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/lac/constraint_matrix.h>
#include <deal.II/lac/solver_gmres.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/grid/tria_iterator.h>
#include <deal.II/grid/tria_boundary_lib.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/grid/grid_refinement.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_renumbering.h>
#include <deal.II/dofs/dof_accessor.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/fe/fe_dgq.h>
#include <deal.II/fe/fe_nothing.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_values.h>
#include <deal.II/hp/dof_handler.h>
#include <deal.II/hp/q_collection.h>
#include <deal.II/hp/fe_values.h>
#include <deal.II/hp/fe_collection.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/data_out.h>
#include <Sacado.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <math.h>
#include <deal.II/base/tensor_function.h>

#include <cstdlib>
#include <ctime>
//
#include <deal.II/base/conditional_ostream.h>
#include <deal.II/base/utilities.h>
#include <deal.II/lac/petsc_vector.h>
#include <deal.II/lac/petsc_parallel_vector.h>
#include <deal.II/lac/petsc_parallel_sparse_matrix.h>
#include <deal.II/lac/petsc_solver.h>
#include <deal.II/lac/petsc_precondition.h>
#include <deal.II/base/timer.h>

#include "model.h"
#include "supplementary/dataStruct.h"
#include "supplementary/supplementaryFunctions.h"
#include "supplementary/parameters.h"
#include "supplementary/functionEvaluations.h"


using namespace dealii;


template <int dim>
class battery
{
  public:
    battery (const unsigned int quad_electrode, const unsigned int quad_separator, parametersClass& _params);
    ~battery();
    virtual void run ();
		parametersClass* params;

    enum
    {
      electrode_domain_id,
      separator_domain_id
    };

    static bool
    cell_is_in_electrode_domain (const typename hp::DoFHandler<dim>::cell_iterator &cell);
    static bool
    cell_is_in_separator_domain (const typename hp::DoFHandler<dim>::cell_iterator &cell); 
    
		virtual void setup_FeSystem();
		
		virtual void setMultDomain();
		virtual void make_grid();
    virtual void mark_boundary();
    virtual void set_active_fe_indices ();
    virtual void setup_constraints();
    void setup_system();
		
    virtual void apply_initial_condition();
    virtual void assemble_system ();
    virtual void solve();
    virtual void output_results (const unsigned int cycle) const;


	   
    Triangulation<dim>    triangulation;
		std::shared_ptr<FESystem<dim>> electrode_fe;
		std::shared_ptr<FESystem<dim>> separator_fe;
    const QGauss<dim> electrode_quadrature;
    const QGauss<dim> separator_quadrature;
		const QGauss<dim-1> common_face_quadrature;


    hp::FECollection<dim> fe_collection;
    hp::DoFHandler<dim>   dof_handler;
    hp::QCollection<dim>  q_collection;
    ConstraintMatrix      constraints;
		
		model<Sacado::Fad::DFad<double>, dim>* mechanicalResidual;
    
		
    SparsityPattern       sparsity_pattern;
		
	  PETScWrappers::MPI::SparseMatrix system_matrix;
	  PETScWrappers::MPI::Vector system_rhs;
	  PETScWrappers::MPI::Vector U;
	  PETScWrappers::MPI::Vector Un;
	  PETScWrappers::MPI::Vector dU;
	  PETScWrappers::MPI::Vector U0;
	  MPI_Comm mpi_communicator;
	  const unsigned int n_mpi_processes;
	  const unsigned int this_mpi_process;
		TimerOutput computing_timer;
		ConditionalOStream pcout;
		
		int totalDOF;
    

    
    //geometry information
    double bX,bY,bZ;
		

    //solution variables
    unsigned int currentIncrement, currentIteration;
    double totalTime, currentTime, dt;
};

#endif